#!/usr/bin/env python

import os
import pexpect
import re
import requests
import time

import roslaunch
import rospy


def blink_resin_LED():
    try:
        supervisor_url = os.environ["RESIN_SUPERVISOR_ADDRESS"]
        api_key = os.environ["RESIN_SUPERVISOR_API_KEY"]
    except KeyError:
        print("Can't find RESIN environment variables")
        return

    headers = {
            'Content-Type': 'application/json',
    }

    params = (
            ('apikey', api_key),
    )

    blink_url = supervisor_url + '/v1/blink'

    requests.post(blink_url, headers=headers, params=params)


def check_controller():
    "Check if a wireless controller has previously been paired"

    print("Looking for existing wireless controller")
    bt.expect('#')
    bt.sendline('devices')
    bt.expect('#')

    try:
        bt.expect('Device [A-F0-9:]+ Wireless', timeout=10)
    except pexpect.exceptions.TIMEOUT:
        print("No wireless controller paired")
    else:
        print("Wireless controller found")
        return


def pair_controller():
    "Set up BT to scan for and pair with a wireless controller"

    mac_re = re.compile('[A-F0-9:]+')

    print("Attempting to pair ...")
    bt.sendline('agent on')
    bt.expect('#')
    bt.sendline('default-agent')
    bt.expect('#')
    bt.sendline('scan on')

    try:
        bt.expect('[A-F0-9:]+ Wireless', timeout=300)
    except pexpect.exceptions.TIMEOUT:
        print("No pairing attempt detected, quiting")
        exit(1)

    m = mac_re.match(bt.after)
    if not m:
        print("No valid MAC address detected")
        exit(1)
    mac = m.group(0)

    print("Found {}".format(mac))
    bt.send('pair ')
    bt.sendline(mac)
    bt.expect('#')
    bt.send('trust ')
    bt.sendline(mac)
    bt.expect('#')
    print("Paired & trusted wireless controller")
    bt.sendline('exit')


if __name__ == "__main__":

    rospy.init_node('bt_joy', anonymous=True)
    uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
    roslaunch.configure_logging(uuid)
    launch = roslaunch.parent.ROSLaunchParent(
            uuid,
            ["/ros/hgbot_ws/src/hgbot_infra/launch/bt_joy_additional.launch"])

    bt = pexpect.spawn('bluetoothctl')

    while (True):

        if not check_controller():
            pair_controller()

        blink_resin_LED()

        while not os.path.exists("/dev/input/js0"):
            time.sleep(1)

        blink_resin_LED()

        launch.start()

        while os.path.exists("/dev/input/js0"):
            time.sleep(1)

        launch.shutdown()
