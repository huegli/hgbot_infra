#!/usr/bin/env python

import os
import pexpect
import re
import requests
import time

import rospy


class BlueToothController:
    """A class for a PS4 controller connected by Bluetooth"""
    def __init__(self):
        rospy.logdebug("Launching bluetoothctl")
        self.bt = pexpect.spawn('bluetoothctl')

        self.bt.sendline('agent on')
        self.bt.expect('#')
        self.bt.sendline('default-agent')
        self.bt.expect('#')

        self.paired = self._check_paired()

    def _check_paired(self):
        """Check if a controller has been previously paired"""

        rospy.loginfo("Looking for existing wireless controller")
        self.bt.expect('#')
        self.bt.sendline('paired-devices')
        self.bt.expect('#')

        try:
            self.bt.expect('Device [A-F0-9:]+ Wireless', timeout=10)
        except pexpect.exceptions.TIMEOUT:
            rospy.loginfo("No wireless controller paired")
            return False
        else:
            rospy.loginfo("Wireless controller found")
            return True

    def is_paired(self):
        """Check pair state, query controller if false"""
        if self.paired:
            return True
        else:
            self.paired = self._check_paired()

    def is_connected(self):
        """Check if a controller device is available"""
        return os.path.exists("/dev/input/js0")

    def pair(self):
        """Set up BT to scan for and pair with a wireless controller"""

        mac_re = re.compile('[A-F0-9:]+')

        rospy.loginfo("Attempting to pair ...")
        self.bt.sendline('scan on')

        try:
            self.bt.expect('[A-F0-9:]+ Wireless', timeout=180)
        except pexpect.exceptions.TIMEOUT:
            rospy.logerr("No pairing attempt detected, stopping")
            self.bt.sendline('scan off')
            self.bt.expect('#')
            return False

        m = mac_re.match(self.bt.after)
        if not m:
            rospy.logerr("No valid MAC address detected")
            return False
        mac = m.group(0)

        rospy.loginfo("Found {}".format(mac))
        self.bt.send('pair ')
        self.bt.sendline(mac)
        self.bt.expect('#')
        self.bt.send('trust ')
        self.bt.sendline(mac)
        self.bt.expect('#')
        rospy.loginfo("Paired & trusted wireless controller")
        self.paired = True
        return True


def blink_resin_LED():
    try:
        supervisor_url = os.environ["RESIN_SUPERVISOR_ADDRESS"]
        api_key = os.environ["RESIN_SUPERVISOR_API_KEY"]
    except KeyError:
        rospy.logerr("Can't find RESIN environment variables")
        return

    headers = {
            'Content-Type': 'application/json',
    }

    params = (
            ('apikey', api_key),
    )

    blink_url = supervisor_url + '/v1/blink'

    requests.post(blink_url, headers=headers, params=params)


if __name__ == "__main__":

    rospy.init_node('bt_joy', log_level=rospy.DEBUG)

    btc = BlueToothController()

    if not btc.is_paired():
        rospy.logdebug("FAST-BLINK")
        btc.pair()

    while (True):
        if btc.is_connected():
            rospy.logdebug("SOLID")
        elif btc.is_paired():
            rospy.logdebug("BLINK")
        else:
            rospy.logdebug("OFF")
        time.sleep(10)

#    rospy.logdebug("Setting up launch file")
#    uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
#    roslaunch.configure_logging(uuid)
#    launch = roslaunch.parent.ROSLaunchParent(
#            uuid,
#            ["/ros/hgbot_ws/src/hgbot_infra/launch/bt_joy_additional.launch"])


#    while (True):
#
#        if not check_controller():
#            pair_controller()
#
#        blink_resin_LED()
#
#        while not os.path.exists("/dev/input/js0"):
#            time.sleep(1)
#        rospy.logdebug("Found joystick device")
#
#        blink_resin_LED()
#
#        rospy.logdebug("Launching additional nodes")
#        launch.start()
#
#        while os.path.exists("/dev/input/js0"):
#            time.sleep(1)
#        rospy.logdebug("joystick device is no longer available")
#
#        rospy.logdebug("Quitting additional nodes")
#        launch.shutdown()
