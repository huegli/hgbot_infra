#!/usr/bin/env python

import os
import pexpect
import re
import requests
import time

import rospy

from hgbot_infra.srv import BtJoyCmd


class BlueToothController:
    """A class for a PS4 controller connected by Bluetooth"""
    def __init__(self):
        rospy.logdebug("Launching bluetoothctl")
        self.bt = pexpect.spawn('bluetoothctl')

        self.bt.sendline('agent on')
        self.bt.expect('#')
        self.bt.sendline('default-agent')
        self.bt.expect('#')

        self.status = 'READY'
        if self._check_paired():
            self.status = 'PAIRED'
        if self._check_connected():
            self.status = 'CONNECTED'

    def _check_paired(self):
        """Check if a controller has been previously paired"""

        rospy.logdebug("Looking for existing wireless controller")
        self.bt.expect('#')
        self.bt.sendline('paired-devices')
        self.bt.expect('#')

        try:
            self.bt.expect('Device [A-F0-9:]+ Wireless', timeout=5)
        except pexpect.exceptions.TIMEOUT:
            rospy.logdebug("No wireless controller paired")
            return False
        else:
            rospy.logdebug("Wireless controller found")
            return True

    def is_paired(self):
        """Check pair state, query controller if false"""
        if (self.status == 'PAIRED') or (self.status == 'CONNECTED'):
            return True
        else:
            if self._check_paired():
                if self._check_connected():
                    self.status = 'CONNECTED'
                else:
                    self.status = 'PAIRED'
                return True
            else:
                self.status = 'READY'
                return False

    def _check_connected(self):
        """Check if a controller device is available"""
        return os.path.exists("/dev/input/js0")

    def is_connected(self):
        """Check if a controller device is available"""
        if self.status == 'CONNECTED':
            return True
        else:
            if self._check_connected():
                self.status == 'CONNECTED'
                return True
            else:
                return False

    def pair(self):
        """Set up BT to scan for and pair with a wireless controller"""

        mac_re = re.compile('[A-F0-9:]+')

        rospy.logdebug("Attempting to pair ...")
        self.status = 'SCANING'
        self.bt.sendline('scan on')

        try:
            self.bt.expect('[A-F0-9:]+ Wireless', timeout=180)
        except pexpect.exceptions.TIMEOUT:
            rospy.logwarn("No pairing attempt detected, stopping scan")
            self.bt.sendline('scan off')
            self.bt.expect('#')
            self.status = 'READY'
            return False

        m = mac_re.match(self.bt.after)
        if not m:
            rospy.logwarn("No valid MAC address detected")
            self.bt.sendline('scan off')
            self.bt.expect('#')
            self.status = 'READY'
            return False
        mac = m.group(0)

        rospy.logdebug("Found {}".format(mac))
        self.bt.send('pair ')
        self.bt.sendline(mac)
        self.bt.expect('#')
        self.bt.send('trust ')
        self.bt.sendline(mac)
        self.bt.expect('#')
        rospy.logdebug("Paired & trusted wireless controller")
        self.bt.expect('#')
        self.bt.sendline('scan off')
        self.status = 'PAIRED'
        time.sleep(2)
        if self._check_connected():
            self.status = 'CONNECTED'
        return True

    def is_scanning(self):
        """Determine if scanning is underway"""
        return (self.status == 'SCANNING')

    def bt_joy_callback(self, req):
        if req.cmd == 'scan':
            self.pair()
        return self.status


def blink_resin_LED():
    try:
        supervisor_url = os.environ["RESIN_SUPERVISOR_ADDRESS"]
        api_key = os.environ["RESIN_SUPERVISOR_API_KEY"]
    except KeyError:
        rospy.logerr("Can't find RESIN environment variables")
        return

    headers = {
            'Content-Type': 'application/json',
    }

    params = (
            ('apikey', api_key),
    )

    blink_url = supervisor_url + '/v1/blink'

    requests.post(blink_url, headers=headers, params=params)


def bt_joy_server():
    rospy.init_node('bt_joy', log_level=rospy.DEBUG)

    rospy.logdebug("Creating BT Controller object")
    btc = BlueToothController()

    rospy.logdebug("Launch bt_joy service")
    rospy.Service('bt_joy_service', BtJoyCmd, btc.bt_joy_callback)

    if not btc.is_paired():
        rospy.logdebug("FAST-BLINK")
        btc.pair()

    d = rospy.Duration(20)  # wake up every 20 seconds to report status
    while not rospy.is_shutdown():
        if btc.is_scanning():
            rospy.logdebug("FAST-BLINK")
        elif btc.is_connected():
            rospy.logdebug("SOLID")
        elif btc.is_paired():
            rospy.logdebug("BLINK")
        else:
            rospy.logdebug("OFF")
        rospy.sleep(d)


if __name__ == "__main__":
    bt_joy_server()
